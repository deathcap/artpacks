// Generated by CoffeeScript 1.6.3
(function() {
  var AdmZip, ArtPackArchive, ArtPacks, aps, data, name, nameToPath_RP, path, _i, _len, _ref;

  AdmZip = require('adm-zip');

  path = require('path');

  ArtPacks = (function() {
    function ArtPacks(packs) {
      var pack, _i, _len;
      this.packs = [];
      for (_i = 0, _len = packs.length; _i < _len; _i++) {
        pack = packs[_i];
        this.addPack(pack);
      }
    }

    ArtPacks.prototype.addPack = function(pack) {
      if (typeof pack === 'string') {
        return this.packs.push(new ArtPackArchive(pack));
      } else {
        return this.packs.push(pack);
      }
    };

    ArtPacks.prototype.getTexture = function(name) {
      var data, pack, _i, _len, _ref;
      _ref = this.packs;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        pack = _ref[_i];
        data = pack.read(name);
        if (data != null) {
          return data;
        }
      }
      return void 0;
    };

    return ArtPacks;

  })();

  nameToPath_RP = function(name) {
    var a, category, ext, namespace, pathRP, _ref;
    a = name.split('/');
    if (a.length > 1) {
      category = a[0], name = a[1];
    }
    category = (_ref = {
      undefined: 'blocks',
      'i': 'items'
    }[category]) != null ? _ref : category;
    a = name.split(':');
    if (a.length > 1) {
      namespace = a[0], name = a[1];
    }
    if (namespace == null) {
      namespace = '*';
    }
    ext = '.png';
    pathRP = "assets/" + namespace + "/textures/" + category + "/" + name + ".png";
    return pathRP;
  };

  ArtPackArchive = (function() {
    function ArtPackArchive(filename) {
      this.filename = filename;
      this.zip = new AdmZip(this.filename);
      this.zipEntries = this.zip.getEntries();
      this.namespaces = this.scanNamespaces();
      this.namespaces.push('foo');
    }

    ArtPackArchive.prototype.scanNamespaces = function() {
      var namespaces, parts, zipEntry, _i, _len, _ref;
      namespaces = {};
      _ref = this.zipEntries;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        zipEntry = _ref[_i];
        parts = zipEntry.entryName.split(path.sep);
        if (parts.length < 2) {
          continue;
        }
        if (parts[0] !== 'assets') {
          continue;
        }
        if (parts[1].length === 0) {
          continue;
        }
        namespaces[parts[1]] = true;
      }
      return Object.keys(namespaces);
    };

    ArtPackArchive.prototype.read = function(name) {
      var data, found, namespace, pathRP, tryPath, tryPaths, zipEntry, _i, _len;
      pathRP = nameToPath_RP(name);
      found = false;
      if (pathRP.indexOf('*') === -1) {
        tryPaths = [pathRP];
      } else {
        tryPaths = (function() {
          var _i, _len, _ref, _results;
          _ref = this.namespaces;
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            namespace = _ref[_i];
            _results.push(pathRP.replace('*', namespace));
          }
          return _results;
        }).call(this);
      }
      for (_i = 0, _len = tryPaths.length; _i < _len; _i++) {
        tryPath = tryPaths[_i];
        zipEntry = this.zip.getEntry(tryPath);
        if (zipEntry != null) {
          data = zipEntry.getData();
          return data;
        }
      }
      return void 0;
    };

    ArtPackArchive.prototype.readAll = function(names) {
      var data, name, results, _i, _len;
      results = {};
      for (_i = 0, _len = names.length; _i < _len; _i++) {
        name = names[_i];
        data = this.read(name);
        if (data == null) {
          console.log("WARNING: nothing found for " + name);
        }
        results[name] = data;
      }
      return results;
    };

    return ArtPackArchive;

  })();

  aps = new ArtPacks(['test.zip', 'test2.zip']);

  _ref = ['dirt', 'i/stick', 'misc/shadow', 'minecraft:dirt', 'somethingelse:dirt', 'invalid', 'misc/pumpkinblur'];
  for (_i = 0, _len = _ref.length; _i < _len; _i++) {
    name = _ref[_i];
    data = aps.getTexture(name);
    console.log(name, '=', data);
  }

}).call(this);
