// Generated by CoffeeScript 1.6.3
(function() {
  var ArtPackArchive, ArtPacks, ZIP, binaryXHR, fs, nameToPath_RP, path;

  ZIP = require('zip');

  path = require('path');

  fs = require('fs');

  binaryXHR = require('binary-xhr');

  ArtPacks = (function() {
    function ArtPacks(packs) {
      var pack, _i, _len;
      this.packs = [];
      for (_i = 0, _len = packs.length; _i < _len; _i++) {
        pack = packs[_i];
        this.addPack(pack);
      }
    }

    ArtPacks.prototype.addPack = function(pack) {
      if (pack instanceof ArrayBuffer) {
        return this.packs.push(new ArtPackArchive(pack));
      } else {
        return this.packs.push(pack);
      }
    };

    ArtPacks.prototype.getTexture = function(name) {
      var blob, pack, _i, _len, _ref;
      _ref = this.packs;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        pack = _ref[_i];
        blob = pack.getBlob(name);
        if (blob != null) {
          return blob;
        }
      }
      return void 0;
    };

    return ArtPacks;

  })();

  nameToPath_RP = function(name) {
    var a, category, ext, namespace, pathRP, _ref;
    a = name.split('/');
    if (a.length > 1) {
      category = a[0], name = a[1];
    }
    category = (_ref = {
      undefined: 'blocks',
      'i': 'items'
    }[category]) != null ? _ref : category;
    a = name.split(':');
    if (a.length > 1) {
      namespace = a[0], name = a[1];
    }
    if (namespace == null) {
      namespace = '*';
    }
    ext = '.png';
    pathRP = "assets/" + namespace + "/textures/" + category + "/" + name + ".png";
    return pathRP;
  };

  ArtPackArchive = (function() {
    function ArtPackArchive(packData) {
      var _this = this;
      if (packData instanceof ArrayBuffer) {
        packData = new Buffer(new Uint8Array(packData));
      }
      this.zip = new ZIP.Reader(packData);
      this.zipEntries = {};
      this.zip.forEach(function(entry) {
        return _this.zipEntries[entry.getName()] = entry;
      });
      this.namespaces = this.scanNamespaces();
      this.namespaces.push('foo');
    }

    ArtPackArchive.prototype.scanNamespaces = function() {
      var namespaces, parts, zipEntryName, _i, _len, _ref;
      namespaces = {};
      _ref = Object.keys(this.zipEntries);
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        zipEntryName = _ref[_i];
        parts = zipEntryName.split(path.sep);
        if (parts.length < 2) {
          continue;
        }
        if (parts[0] !== 'assets') {
          continue;
        }
        if (parts[1].length === 0) {
          continue;
        }
        namespaces[parts[1]] = true;
      }
      return Object.keys(namespaces);
    };

    ArtPackArchive.prototype.getArrayBuffer = function(name) {
      var data, found, namespace, pathRP, tryPath, tryPaths, zipEntry, _i, _len;
      pathRP = nameToPath_RP(name);
      found = false;
      if (pathRP.indexOf('*') === -1) {
        tryPaths = [pathRP];
      } else {
        tryPaths = (function() {
          var _i, _len, _ref, _results;
          _ref = this.namespaces;
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            namespace = _ref[_i];
            _results.push(pathRP.replace('*', namespace));
          }
          return _results;
        }).call(this);
      }
      for (_i = 0, _len = tryPaths.length; _i < _len; _i++) {
        tryPath = tryPaths[_i];
        zipEntry = this.zipEntries[tryPath];
        if (zipEntry != null) {
          data = zipEntry.getData();
          return data;
        }
      }
      return void 0;
    };

    ArtPackArchive.prototype.getBlob = function(name) {
      var arrayBuffer;
      arrayBuffer = this.getArrayBuffer(name);
      if (arrayBuffer == null) {
        return void 0;
      }
      return new Blob([arrayBuffer], {
        type: 'image/png'
      });
    };

    return ArtPackArchive;

  })();

  binaryXHR('test.zip', function(err, pack1) {
    if (err) {
      return console.log(err);
    }
    return binaryXHR('test2.zip', function(err, pack2) {
      var aps, blob, img, name, url, _i, _len, _ref, _results;
      if (err) {
        return console.log(err);
      }
      aps = new ArtPacks([pack1, pack2]);
      console.log(aps);
      _ref = ['dirt', 'i/stick', 'misc/shadow', 'minecraft:dirt', 'somethingelse:dirt', 'invalid', 'misc/pumpkinblur'];
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        name = _ref[_i];
        document.body.appendChild(document.createTextNode(name + ' = '));
        blob = aps.getTexture(name);
        if (blob == null) {
          document.body.appendChild(document.createTextNode('(not found)'));
        } else {
          url = URL.createObjectURL(blob);
          console.log(name, '=', blob, url);
          img = document.createElement('img');
          img.src = url;
          img.title = name;
          document.body.appendChild(img);
        }
        _results.push(document.body.appendChild(document.createElement('br')));
      }
      return _results;
    });
  });

}).call(this);
