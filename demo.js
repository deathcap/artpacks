// Generated by CoffeeScript 1.7.0
(function() {
  var container, createArtPacks, dragleave, dragover, drop, packs, show, showControls, showInfo, showSounds, showTextures, urls;

  createArtPacks = require('./');

  urls = ['https://dl.dropboxusercontent.com/u/258156216/artpacks/ProgrammerArt-2.2-dev-ResourcePack-20140308.zip', 'invalid.zip', 'README.md'];

  container = document.createElement('div');

  container.style.position = 'absolute';

  container.style.height = '90%';

  container.style.width = '90%';

  container.style.border = '5px dotted black';

  document.body.appendChild(container);

  packs = createArtPacks(urls);

  packs.on('loadedURL', function(url) {
    return console.log('Loaded ', url);
  });

  showTextures = function() {
    var name, _i, _len, _ref, _results;
    _ref = ['dirt', 'blocks/dirt', 'i/stick', 'items/stick', 'misc/shadow', 'minecraft:dirt', 'water_flow', 'invalid'];
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      name = _ref[_i];
      _results.push(show(name));
    }
    return _results;
  };

  show = function(name) {
    return packs.getTextureImage(name, function(img) {
      var im, _i, _len, _results;
      if (Array.isArray(img)) {
        container.appendChild(document.createTextNode(name + (" = (animated " + img.length + ") ")));
        _results = [];
        for (_i = 0, _len = img.length; _i < _len; _i++) {
          im = img[_i];
          im.title = name;
          container.appendChild(im);
          _results.push(container.appendChild(document.createTextNode(', ')));
        }
        return _results;
      } else {
        container.appendChild(document.createTextNode(name + ' = '));
        img.title = name;
        container.appendChild(img);
        return container.appendChild(document.createElement('br'));
      }
    }, function(err) {
      container.appendChild(document.createTextNode(name + ' = '));
      container.appendChild(document.createTextNode('(not found)'));
      return container.appendChild(document.createElement('br'));
    });
  };

  showSounds = function() {
    var audio, name, url, _i, _len, _ref, _results;
    _ref = ['liquid/splash'];
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      name = _ref[_i];
      container.appendChild(document.createTextNode('sound: ' + name + ' = '));
      url = packs.getSound(name);
      if (url == null) {
        container.appendChild(document.createTextNode('(not found)'));
      } else {
        console.log(url);
        audio = document.createElement('audio');
        audio.src = url;
        audio.controls = true;
        audio.title = name;
        container.appendChild(audio);
      }
      _results.push(container.appendChild(document.createElement('br')));
    }
    return _results;
  };

  showControls = function() {
    var audio, controls, img, input, showSample;
    controls = document.createElement('div');
    input = document.createElement('input');
    input.setAttribute('id', 'input');
    controls.appendChild(input);
    controls.appendChild(document.createTextNode(' = '));
    img = document.createElement('img');
    img.setAttribute('id', 'outputImg');
    img.style.visibility = 'hidden';
    controls.appendChild(img);
    audio = document.createElement('audio');
    audio.setAttribute('id', 'outputAudio');
    audio.controls = true;
    audio.style.visibility = 'hidden';
    controls.appendChild(audio);
    showSample = function() {
      var url;
      url = packs.getTexture(input.value);
      console.log("lookup " + input.value + " = " + url);
      if (url != null) {
        img.src = url;
        return img.style.visibility = '';
      } else {
        img.style.visibility = 'hidden';
        url = packs.getSound(input.value);
        if (url != null) {
          audio.src = url;
          return audio.style.visibility = '';
        } else {
          return audio.style.visibility = 'hidden';
        }
      }
    };
    document.body.addEventListener('keyup', showSample);
    input.value = 'stone';
    container.appendChild(controls);
    return showSample();
  };

  showInfo = function() {
    var p, ps, s, _i, _len;
    ps = packs.getLoadedPacks();
    s = "Loaded " + ps.length + " packs: ";
    for (_i = 0, _len = ps.length; _i < _len; _i++) {
      p = ps[_i];
      s += "" + p + " ";
    }
    container.appendChild(document.createTextNode(s));
    container.appendChild(document.createElement('br'));
    container.appendChild(document.createTextNode('Drop a pack here to load (hold shift to append), or enter a name in text box below to lookup:'));
    container.appendChild(document.createElement('br'));
    return container.appendChild(document.createElement('br'));
  };

  packs.on('loadedAll', function(packs) {
    console.log("Loaded all packs");
    while (container.firstChild) {
      container.removeChild(container.firstChild);
    }
    showInfo();
    showTextures();
    showSounds();
    return showControls();
  });

  dragover = function(ev) {
    ev.stopPropagation();
    ev.preventDefault();
    return container.style.border = '5px dashed black';
  };

  dragleave = function(ev) {
    ev.stopPropagation();
    ev.preventDefault();
    return container.style.border = '5px dotted black';
  };

  drop = function(mouseEvent) {
    var file, files, reader, _i, _len, _results;
    dragleave(mouseEvent);
    files = mouseEvent.target.files || mouseEvent.dataTransfer.files;
    console.log('Dropped', files);
    _results = [];
    for (_i = 0, _len = files.length; _i < _len; _i++) {
      file = files[_i];
      console.log('Reading dropped', file);
      reader = new FileReader();
      reader.addEventListener('load', function(readEvent) {
        var arrayBuffer;
        if (readEvent.total !== readEvent.loaded) {
          return;
        }
        arrayBuffer = readEvent.currentTarget.result;
        if (!mouseEvent.shiftKey) {
          packs.clear();
        }
        return packs.addPack(arrayBuffer, file.name);
      });
      _results.push(reader.readAsArrayBuffer(file));
    }
    return _results;
  };

  container.addEventListener('dragover', dragover, false);

  container.addEventListener('dragleave', dragleave, false);

  container.addEventListener('drop', drop, false);

}).call(this);
