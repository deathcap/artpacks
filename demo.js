// Generated by CoffeeScript 1.6.3
(function() {
  var aps, container, createArtPacks, dragleave, dragover, drop, showSounds, showTextures, urls;

  createArtPacks = require('./');

  urls = ['https://dl.dropboxusercontent.com/u/258156216/artpacks/ProgrammerArt-2.1-dev-ResourcePack-20140116.zip', 'invalid.zip', 'README.md'];

  container = document.createElement('div');

  container.style.position = 'absolute';

  container.style.height = '90%';

  container.style.width = '90%';

  container.style.border = '5px dotted black';

  document.body.appendChild(container);

  aps = createArtPacks(urls);

  aps.on('loadedURL', function(url) {
    return console.log('Loaded ', url);
  });

  showTextures = function(aps) {
    var img, name, url, _i, _len, _ref, _results;
    _ref = ['dirt', 'blocks/dirt', 'i/stick', 'items/stick', 'minecraft:dirt', 'somethingelse:dirt', 'invalid'];
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      name = _ref[_i];
      container.appendChild(document.createTextNode(name + ' = '));
      url = aps.getTexture(name);
      if (url == null) {
        container.appendChild(document.createTextNode('(not found)'));
      } else {
        img = document.createElement('img');
        img.src = url;
        img.title = name;
        container.appendChild(img);
      }
      _results.push(container.appendChild(document.createElement('br')));
    }
    return _results;
  };

  showSounds = function(aps) {
    var audio, name, url, _i, _len, _ref, _results;
    _ref = ['liquid/splash'];
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      name = _ref[_i];
      container.appendChild(document.createTextNode('sound: ' + name + ' = '));
      url = aps.getSound(name);
      if (url == null) {
        container.appendChild(document.createTextNode('(not found)'));
      } else {
        console.log(url);
        audio = document.createElement('audio');
        audio.src = url;
        audio.controls = true;
        audio.title = name;
        container.appendChild(audio);
      }
      _results.push(container.appendChild(document.createElement('br')));
    }
    return _results;
  };

  aps.on('loadedAll', function(packs) {
    console.log(aps);
    while (container.firstChild) {
      container.removeChild(container.firstChild);
    }
    showTextures(aps);
    return showSounds(aps);
  });

  dragover = function(ev) {
    ev.stopPropagation();
    ev.preventDefault();
    return container.style.border = '5px dashed black';
  };

  dragleave = function(ev) {
    ev.stopPropagation();
    ev.preventDefault();
    return container.style.border = '5px dotted black';
  };

  drop = function(ev) {
    var file, files, reader, _i, _len, _results;
    dragleave(ev);
    files = ev.target.files || ev.dataTransfer.files;
    console.log('Dropped', files);
    _results = [];
    for (_i = 0, _len = files.length; _i < _len; _i++) {
      file = files[_i];
      console.log('Reading dropped', file);
      reader = new FileReader();
      reader.addEventListener('load', function(e2) {
        var arrayBuffer;
        arrayBuffer = e2.currentTarget.result;
        aps.clear();
        return aps.addPack(arrayBuffer);
      });
      _results.push(reader.readAsArrayBuffer(file));
    }
    return _results;
  };

  container.addEventListener('dragover', dragover, false);

  container.addEventListener('dragleave', dragleave, false);

  container.addEventListener('drop', drop, false);

}).call(this);
